// Code generated by go-bindata.
// sources:
// bundled_scripts/idrac.py
// bundled_scripts/idrac.toml
// bundled_scripts/ilo.py
// bundled_scripts/ilo.toml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _idracPy = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x3a\x7b\x6f\xe2\xb8\xf6\xff\xf3\x29\xfc\x63\xb5\x4a\xd0\xd2\x00\x9d\x76\x76\x86\xdf\x30\x2b\x86\xc7\x2e\xda\x81\xf6\x16\xba\x3b\x57\xbd\x55\xe4\x26\xa6\x64\x27\x24\xac\x9d\x0c\xe5\x56\xfd\xee\xf7\xd8\xce\xc3\x79\x41\x69\xef\x48\x97\x4a\x8d\x13\x9f\x97\xcf\xdb\x4e\x7e\xf8\xbf\x56\xc8\x68\xeb\xce\xf1\x5a\xc4\xfb\x86\x36\xbb\x60\xe5\x7b\xb5\x9a\xb3\xde\xf8\x34\x40\x7f\x31\xb8\x89\xc6\x3e\x8b\x47\x94\xc4\x23\xb6\x4b\x1e\x86\xa1\x63\xd7\x96\xd4\x5f\xa3\x87\xb5\x6b\x90\x80\x12\x82\xa2\xa9\x91\x4b\xd6\xc4\x0b\x16\xfc\x11\x66\x68\xb4\xa8\xa5\x94\xfe\x0e\x09\x0b\x98\x44\x8c\xef\x8c\x0d\xb6\xbe\xe2\x7b\xc2\x8c\x90\xba\xae\x73\xf7\xc6\x20\x0f\x16\xd9\x04\x8e\xef\xb1\x98\xe6\xc4\x63\xc4\x0a\x29\xb9\x92\x38\x7f\x62\xea\x39\xde\x7d\xad\x76\x3d\x1f\x5d\xa1\x1e\x08\x6b\xc0\x72\x1c\xea\x7b\x37\xda\xb4\x3f\xeb\xff\x3a\x9a\x8e\x66\x0b\x93\xcf\x9a\xb3\xfe\x74\xa4\xdd\xd6\x2e\xfb\xf3\xf9\x01\x48\x0e\xf2\xe7\xc5\xd5\x10\xa0\x6b\xf3\xc1\x6f\xa3\x69\x1f\x10\xea\xab\x20\xd8\x74\x5b\x2d\x66\xad\xc8\x1a\x33\xc3\x5e\x07\x4b\xc3\xa7\xf7\xad\xed\x1d\x59\xb7\xb6\xcc\x72\xd6\xad\x4e\x0b\xfe\x9f\x48\x88\xd6\x69\xbd\xf6\x65\xfa\x79\x36\x37\x39\xbb\xfa\x63\x84\xbe\xdd\x6e\x8d\xed\x1b\x81\x78\xda\x6e\xbf\x69\xb5\xcf\x5b\xcc\xc7\x9b\x13\x10\x86\xb8\xfe\x86\x3c\xc5\x58\x7f\xce\x47\x33\x15\x31\xe6\x0b\x6a\xe6\x08\x92\x35\xe3\x44\xce\x5a\xed\xf7\x60\xc5\x70\x4d\x28\xe6\xca\x52\x48\xc0\xca\xca\x68\xe4\x65\x5f\x63\x0f\x64\x17\x57\xe3\x81\xd9\x09\x81\x59\xc7\xfc\xd4\x9f\x8f\x4a\x49\x10\xd7\x35\x2c\x7f\x5d\xbd\xfc\xd6\x8f\x0c\x08\xfd\x80\x7e\x25\x1e\xa1\x8e\x85\x04\xf9\x13\x8b\xe2\x65\x40\x6c\xc4\xd7\x80\xd6\x84\x31\x30\x78\x6d\x7e\xd1\xbf\x34\x47\xb3\xeb\xa9\x14\xd9\x5c\x8c\xa6\x97\x9f\xfb\x0b\xce\x58\xd3\xb4\x0f\xbf\xc0\x9a\xd1\x37\x42\x19\x2c\xae\x57\xef\x18\xed\xfa\x2f\x1f\x6b\x1f\x58\x77\x14\xe9\x8c\xbb\x9e\xc7\xba\xac\x57\x7f\xa6\x92\xeb\x11\xc6\x96\xe1\x5e\xde\xae\xa5\xfa\x7d\xd7\xc2\xb6\x4d\x41\x5a\x70\xb6\x14\x19\xd6\x53\x40\x3f\xa0\xda\x14\x99\x14\x71\x0f\x9b\xb6\xfe\xb1\x86\x10\xac\xfc\x37\x82\x6d\x42\xf9\x0d\xdc\xc2\x2a\xba\x7d\x8b\x4f\x23\xd6\x5d\x87\x2c\xb8\xf6\x60\x92\x05\xd8\xb3\x7b\xf5\x80\x86\xa4\xfe\xf1\x68\x46\xad\x51\x34\x26\x1f\x5a\x29\x7d\x85\xe1\xc2\xaf\x64\xf6\x08\x6b\x05\xab\xf2\xd8\x37\x21\x92\x9f\x24\x85\x85\x9f\x60\xc3\x7c\xf7\x8a\x30\x3f\xa4\x16\xb9\xbe\x9a\x54\x13\xa2\x11\x90\x20\x91\xc3\x52\x64\x99\x4a\x37\x9a\x0c\x2b\x29\xf1\x2c\xd5\x7d\xe4\xff\x23\x69\x12\x14\x85\xcc\x15\xd9\xb8\xbb\x58\xcc\x58\xaf\xd2\xec\xcf\x52\xa0\xea\x24\x2d\xea\xbb\xa4\x85\x3d\xdf\xdb\xad\xfd\x90\x45\x4a\x8c\x88\x49\x96\xad\x02\xcf\x48\x35\x73\xe2\x12\x2b\xf0\xe9\x9c\x04\x8a\x2c\xea\x0c\x9a\xe1\x35\xe9\xd5\x4d\x13\xe2\xcd\x83\x21\x83\xcc\xc9\xf5\xc5\xa2\xf9\x44\x5f\x31\x42\xca\xb2\x84\xc1\x87\x96\xea\x50\xe0\x5d\x9f\x7c\x7b\x97\x48\x44\xbc\x6e\xe2\x0b\x39\x71\x2e\x20\x37\xaf\x9d\x7f\x93\x91\xe2\x37\x39\x90\x29\x7e\x88\xca\x00\xe3\x7e\xf1\x60\x92\xe8\x2e\x11\x51\x85\x48\xa4\xcc\x33\xe5\x22\x4a\xa9\xf8\x28\x8e\xfb\x8f\x35\xc8\x0e\xb5\xf1\xc0\x9c\xcc\xc6\x17\xe6\xe8\xcb\xe5\xd5\x68\x3e\x9f\x5c\xf0\x94\x47\x09\x4f\x4e\x1b\xc7\x25\x3a\xd5\xf4\x9b\xf6\xc9\xfb\xdb\x9f\x1a\x27\xf2\xaa\x35\x6a\xb5\x69\x7f\x60\x02\xf8\x78\xf2\xc5\xfc\xf4\xb9\x3f\xf8\xfd\xf3\x64\xbe\x00\xb4\x1b\x21\x81\x76\xde\x86\xbf\x33\xad\x89\xb4\x37\x6f\xce\xdb\x6f\xc7\x7c\xd4\x6e\xbf\x7f\xf7\xf3\x5b\x39\xe2\xbf\x64\x34\xe0\xa3\xd3\xf6\x59\xe7\xfc\x0d\x1f\x75\xce\xde\x77\x4e\x61\x56\x52\x6a\x83\x6b\x48\x4a\xe3\xd1\x18\x7e\x02\xa2\x3f\x7e\x7f\x2a\xf1\x4f\xdb\xef\xe4\x68\x38\xea\x0f\x4f\x07\x12\xae\x3f\x3c\x1b\x02\xfe\x6d\x0d\x6a\xd1\xa4\xff\xb9\x44\xc0\x99\xef\x11\x00\xe5\xe0\x33\x3f\x40\xfd\x6f\xd8\x71\xf1\x9d\x4b\xf8\x83\x2f\x0f\xe2\x8f\x0f\x4f\xf8\x8f\x0f\x6e\xae\xbd\xaf\x9e\xbf\xf5\x6e\x53\xf1\xe5\x12\xa4\x90\x9c\xc6\x7c\x43\x2c\x67\xe9\x10\x9b\x83\xfc\xf3\xf7\x4e\x7b\x30\x14\xb2\x9e\xbe\x39\x3b\x7f\xfb\xf3\xbb\xf7\x6d\xc9\xcc\x13\x3c\x20\xf8\x3f\x11\x34\x76\x5c\x17\x32\xf9\xa7\x1d\xba\x30\x46\xc6\xd4\x10\x32\xd7\x6a\x36\x59\x22\xcf\xa7\x6b\xec\x82\x6b\x98\x6b\x6c\x99\x51\x58\xe8\xca\xb8\xd1\x15\xac\x95\x27\xb0\x38\xe5\xce\x08\x37\x1b\x42\xf5\x86\x41\x21\x40\xc0\xb9\x75\x4d\x2c\xa4\x0b\xb6\xe3\x78\x94\x04\x21\xf5\x54\x04\x60\x5c\xdd\x47\xd8\x0e\xe3\xea\x31\xb7\xb2\x5d\x60\x7a\x79\x1b\x01\x7e\x51\xb3\x5c\x0c\xb2\x4c\x6c\x8a\xad\x11\xa5\x3e\xd5\x47\x71\x0f\x12\x89\xbc\xc1\x82\x59\x04\x37\xbc\xea\x0f\x74\xff\xee\x2f\x88\x27\x98\x17\x00\x7c\xfd\xa6\xe9\x78\x4e\x60\x9a\x3a\x44\xe4\xb2\x89\x56\x3e\x0b\x9a\x28\x64\x84\x36\x05\xfe\xd6\xa7\x76\x44\x8e\xff\x38\x90\xc1\x61\x40\x07\xfc\x92\x9d\xe0\x68\x30\xc1\x2f\xd9\x89\x98\x12\x4c\xc6\xc3\x54\x02\x1a\x7a\x26\x44\x00\x44\x98\x1d\x09\x21\x24\x36\x79\xba\x68\xa2\x38\x51\xf4\x34\xea\xfb\x41\xcb\x86\x3c\xa2\x29\x02\x65\x13\x78\xdc\xfc\x30\x48\x80\x8f\x4f\x32\x6c\xeb\xc6\x92\x9b\x38\xd0\x13\xd9\x1b\x09\xf6\x3d\x2f\xf8\x10\xb8\xb6\xc9\x13\x2e\x17\x1d\x2e\x06\xff\xd7\xd1\x53\xa8\xa8\xf6\xc3\x74\x55\xf5\x8f\x59\x24\x28\xd2\xf2\xb2\x02\xf4\x64\x63\x66\x40\x9e\xa7\xce\x46\xd7\x5a\x5a\x03\xfd\x84\xe0\x02\xff\x95\x95\x66\x70\xb3\xcb\xea\x65\x6f\xb3\xa0\x5c\xda\x5e\x76\x21\x59\x80\x44\x83\xf1\x20\xcf\x2a\x4d\x75\xbd\xd3\xf3\xf3\x74\x36\xd5\x40\xe4\xc4\xa3\x85\x01\xdd\x96\x54\xa4\x09\x99\xcf\x36\x79\x69\xc9\xae\x9a\x8b\xab\xe5\x6d\xa0\x15\x6d\x90\x13\x42\xaa\xb8\x17\x5d\x15\x19\x1a\x8a\xab\xa6\x2c\xa5\x9f\x70\x5d\xc4\xa8\x8a\x4f\xd4\xeb\xf5\x05\xdd\xa1\x00\xea\x3e\x20\x64\xfa\x37\xfe\x70\x03\xec\x85\xb3\x84\xbc\xfc\x21\x2e\x2b\xba\xc3\xcc\xb1\x12\x02\x38\x0c\x56\xa0\x0e\xc7\x12\x85\xc2\x80\x24\x16\x80\x27\x06\x2b\x1c\xa0\x2d\x41\xb6\xef\x69\xb0\xb1\x00\x45\xc2\x66\xc1\xdb\x01\x13\xc6\xdb\x3d\xe4\x78\x72\x91\x30\x4e\xe5\x87\xf4\x82\xbe\x41\x7e\xb1\xc1\x38\x68\x3e\xff\x8c\x2c\x42\x03\xc8\x5e\x40\x9a\x18\xa8\x0f\xe8\x4b\xdf\x75\xfd\x2d\x97\x24\xce\x0a\x68\x0b\xe9\x0a\xee\x4e\xb8\xf8\x09\x25\x21\xa2\x10\x0d\xad\x44\x09\x44\xf8\x1e\x3b\x9e\xa1\x2e\x3b\x35\x98\x28\x2c\x71\x92\x81\x05\x17\x8c\x94\xd5\x3f\x88\x87\x8b\xca\x8f\x75\xd1\xd3\x93\xf0\x6e\x66\x03\x3a\x67\x46\xe8\x7c\x9d\xe5\xae\x37\xc6\x2e\xcb\x91\x91\x22\xb3\xde\x63\xe6\x29\xff\x69\x03\xdf\x0b\x40\xdb\x27\x8b\xdd\x86\x68\x5d\xa4\xe1\xcd\xc6\x8d\x54\x2f\x7a\xe1\x9f\xa0\x85\xf9\x7f\x6b\x85\x29\x23\x41\xef\x7a\x31\x3e\x79\xa7\x65\x69\x3f\x95\xb9\xac\xc3\x53\x3b\xec\xdf\x0c\xff\x6b\x37\x03\x0d\x13\xd4\x80\x96\x2b\x08\x19\xa4\x1d\x1b\xc2\xba\x87\xce\xda\x9d\x6e\x41\x30\x8a\x1d\x46\xd4\xfc\x5a\xef\x73\xe5\x13\x3e\x36\x60\x7b\x27\xcc\x2a\x92\x1d\x8f\x5f\x04\x86\x8e\xb5\x62\xd4\x1b\xb5\xbd\x94\x0a\xbc\xea\x73\x58\xa8\x98\xeb\x22\x68\xb4\x60\x1b\x49\xba\xe8\xf1\xe9\x5f\x5e\x94\xf6\xf9\x4d\xbd\x34\xcb\x24\x3c\x8c\x80\x3c\x04\x49\x38\x34\x0b\x40\x39\x53\xa5\x12\x8a\x05\x31\x73\x83\x61\x71\xb0\x8b\x79\x64\x4f\xbc\x7f\x69\xc1\x75\x8c\x43\x37\x48\x63\xb7\x17\x6d\x12\x0b\xa8\xae\x23\x0a\xc2\xcd\x6d\x7e\xc2\x13\xfa\x8d\xf3\x86\x14\xb1\x61\x2c\x1d\xc8\xf4\x0a\xd7\x8c\xd1\x14\xcc\xac\x49\x72\xbc\x38\x80\xc9\xe9\x41\x00\x51\x94\xde\x39\x9e\x4a\xc2\x70\x02\x88\x37\x78\xae\x37\x6e\x8f\x34\x89\x96\x31\x49\x62\x85\x26\xdc\x30\x61\xa0\x88\x0f\x7f\xa8\xed\x35\x4d\x6c\x12\xa4\x35\x35\xe3\x2f\xdf\xf1\x74\x65\x2d\x8d\x12\x4b\x55\x18\x2a\xca\xc2\x52\x8d\x51\xfb\x62\xde\x93\xc0\x84\xd4\x40\x4c\x9e\x7e\x74\x87\x2f\xc8\x94\xe5\x82\x46\x29\x51\x1c\x74\xf4\x50\x66\xca\x50\x8b\xae\x36\x1c\x4c\xa6\xe6\x7c\xc7\x02\xb2\xfe\xc3\x21\xdb\xa8\x73\x11\xdb\x3f\xd3\xeb\x00\x6e\x76\x8f\xfd\x23\xaa\xe7\x30\x64\xe2\xf9\x5b\xec\xbe\x23\xef\x79\x4a\xba\xe2\x58\x5f\xf0\x6c\x02\xf0\x0c\xae\x79\xf4\x82\xfa\x22\x4f\x6b\xe6\x1e\xf0\x93\x86\xe2\x33\xa8\xc4\xe9\xc3\x58\x6a\xf9\x24\xee\xc1\x2c\x88\x4a\xde\xb7\x71\x5d\x08\xff\xc3\xae\xab\xff\x2d\x67\xe3\x4c\x21\x81\x52\xa7\x2b\xc6\xff\xc4\x03\x10\x80\x0b\x20\xef\xb3\x2d\x64\x60\x70\x36\xa8\x14\x39\x23\xc4\xd1\x0f\xf5\x1f\xc2\x07\x98\xa6\x39\x4f\x5b\x83\x4f\xba\xa2\xde\x43\xa6\x03\x5d\x55\x86\x75\x24\xcd\x4d\xfb\x56\x86\x4b\x31\x63\x3c\x3e\x29\xb8\xc9\xaa\x91\x36\xc5\x5e\xb8\xc4\x16\xb8\x0a\xa1\x5a\x3e\xe8\x85\xeb\x18\xb2\x11\x49\x3b\xd6\x3a\x64\x33\xcb\xa8\x37\xa1\x84\xe4\x10\x5e\x21\x06\x5f\xe9\x7e\xfe\x4a\xda\x96\xc3\x27\xf1\x1f\x12\xaa\x83\x41\x49\xe1\xfa\x8e\xc8\x3a\x56\x21\x43\x25\xef\xc1\x0a\x12\xb1\xc3\xe6\x84\x7e\x73\x2c\xb2\xc0\xf7\xb1\x1c\x59\xfe\xb1\xf5\xb3\x0c\xb9\x2f\x80\x5d\xf3\x3b\x1a\xc5\x2f\x84\x5d\x6f\xb4\x0c\x9a\x76\x0b\x92\x66\x9e\xa8\xdd\xbf\x44\x51\x43\x56\xd9\x0f\x10\xf6\x9a\xb0\x9d\x4d\x06\xc7\xc4\x6c\x04\xfe\xa2\x80\x8d\x71\xbf\x73\xb4\x66\x54\x93\x96\x15\x9e\xe6\xa5\x2b\x88\xb0\xcb\x06\x72\x6a\x9d\x80\xee\xba\xb9\xfe\xd6\x4a\x9c\xe8\x58\x27\x1e\x84\x10\xee\x5e\x00\x5b\xf0\xe8\x40\xa4\xdc\xa1\xd3\xb2\x27\x76\x60\xa8\x1f\x80\x83\xdd\x85\x01\x91\xe5\x23\x83\x61\x41\xb7\xe3\x78\x21\xc9\x37\x2a\x20\xe6\x01\x40\xb9\x90\xca\xfd\x6a\xa6\x8a\xc2\xfd\x4d\xf7\xed\x2d\xd7\x54\xd9\xf9\xc1\x61\x4e\xa9\x05\x0c\xe8\xc7\xa0\x0f\x4d\x59\x14\x77\xb4\x84\xa9\xae\xbd\xa1\xbe\x05\x0f\xa1\xc0\xbd\xc6\xaf\x07\x97\xd7\xc7\xf8\x75\x04\xfe\x22\xbf\x8e\x71\xbf\x7b\x15\xe2\x49\xe0\x78\x8f\x16\x35\x23\xe7\xc2\x87\xd2\x6e\x49\xa2\x93\xba\xcf\x05\x07\xd0\x22\x0f\xdc\x1a\x5e\x49\xef\xb2\x37\x66\xf8\xaf\x52\x8a\x89\xc7\xcf\x34\x2d\x32\x19\xe6\x03\x46\xa8\x23\x5b\x85\x18\xb4\xfb\x81\xae\x19\x5a\xe3\xe6\xa4\x73\x5b\xd9\xa5\xca\xd0\xd2\xff\xc0\x6e\x28\xe3\xaa\x09\x55\x0b\xa4\x17\xe3\xc6\x01\x8f\x8e\x74\x1f\xfb\x72\x76\x17\xa2\xc1\x32\x09\x83\x82\xcc\xb5\xf0\xb2\x44\x31\x13\x29\xff\x62\x79\x19\xfb\xfe\x40\x90\xdc\x5b\xfe\x72\x93\xd9\xde\x40\xdc\xe4\x00\xd8\x86\x10\xfb\x55\x62\x4e\xf1\xc3\xc0\xf5\xad\xaf\x73\x41\xe9\x28\xe9\x84\xa7\x08\xe6\x70\xcd\xcd\x2d\xf1\xda\x71\x77\x30\xf9\xc2\x2c\x7b\x79\x3d\x96\x14\x9e\xd9\x2e\x08\xa6\x2e\xbe\x03\x4f\x2f\x68\xea\xa9\x51\x2c\xbc\x99\xf4\xb4\x26\x6b\x9f\xee\x5e\x93\x9a\xa6\x82\xc2\x31\xd9\x29\xc5\x78\x51\x82\x52\xd0\xbf\x7b\x8e\x12\x6a\xbb\x49\x80\x1e\xcb\x95\xae\x89\xd6\xb5\x7a\xdb\xf3\xf2\xd4\xb1\xaf\x7d\x3d\xe4\x13\xaf\xe4\x5c\xd6\xb1\x1e\x62\x99\xf7\x4a\x06\x95\xf9\x55\x21\x3a\xe7\x04\x8e\x8a\xcc\xd7\xa7\x85\xff\x5e\x3a\x78\x12\x45\x4d\x3e\x54\x6a\x5b\xfc\xba\x8e\xe8\xb9\x2a\xd7\x44\x50\x28\x68\xd0\xeb\x48\xf7\xbb\x55\x03\xd5\x76\xd8\xd7\x57\xb5\x10\x97\xab\x1d\x73\x2c\xec\x0e\x81\xd0\x31\xd1\x9a\xc7\x7b\x51\xcc\x16\x88\xfc\xaf\x76\x17\x4a\xbc\xed\xeb\x93\x8f\x0e\xd8\x8a\x16\x24\xad\x72\xe2\xb0\xa9\x3a\x8d\xa8\x82\x95\x6d\x4a\x5f\xb8\x21\x7d\xde\x7e\x34\x19\xf1\x78\x86\x5d\xbd\x79\xb7\x0b\xc4\x66\xa4\x92\xb7\xc6\xf9\x6a\x15\x01\x3d\xf1\x3e\x71\xfc\xa2\x7a\x52\x3e\xa5\x9b\xde\xa3\xf8\x08\x0a\xb2\x11\xd9\xc3\x68\x7f\x27\xa4\xa4\xaf\x82\x66\x4b\x1f\x16\x75\x84\xf9\x91\xbb\xfa\x24\x56\x2f\x3f\x21\x6d\x17\x93\x2b\x6a\xa1\x4e\xfb\xf4\x2c\x7b\xd9\x9f\x63\x33\x1b\xef\x6e\x4e\x77\x82\xbf\xfa\x44\xe5\xaf\x69\xfb\xba\x88\x92\x17\x31\x25\x5d\x59\x19\x54\xd2\x01\x95\x7b\xed\xc1\xa6\x64\xe9\xdc\x81\xc5\x57\xd8\xf3\x80\xbe\x85\xa9\xfd\xba\xc4\x37\x98\x0c\x09\x3f\xfa\x38\x2a\xeb\xa9\x48\x2f\x4b\x79\x19\x0a\xdf\x39\xdf\x85\x8c\xd8\xa6\x23\x0e\xf5\x18\x09\xf4\xd7\x25\x41\xe1\x05\x2f\xc9\x7e\xf5\x21\x61\x16\x78\x97\xf8\xe2\xa5\x3a\xe8\x60\x47\xae\x09\x13\xa3\xc8\xc6\x5a\x7c\xcc\x24\x38\x1b\xae\xbf\xe5\xaf\x90\x0f\x6e\xcb\x03\x8b\x1f\xd1\x17\x3f\x23\x30\x18\xc1\xd4\x5a\x95\x1d\x21\x1e\x99\x26\xeb\xe3\x7f\x0c\x87\xf9\x53\x40\xb9\x9a\x3d\x6f\x59\x84\x64\x07\xa4\xdf\x44\x05\xd1\x14\x2f\x5a\x05\x86\x71\x4f\xfd\x70\xa3\x77\x32\xf4\x54\x38\x50\x50\x6c\xe7\x03\xd4\x63\x30\x03\xdb\xb6\xae\x90\x68\x3c\x33\xf1\x29\x28\x10\xc5\xca\x5d\x45\xbe\x10\xd7\xe7\x05\xb8\x8c\x56\x5b\x44\x46\xf5\x29\xbd\x32\x0f\xea\xd9\x7b\xac\x5f\x93\xce\x90\x3d\x25\x3b\x78\xaa\x58\x8b\xf4\x9b\x81\x49\xb5\xaa\xf0\xbf\xd1\x32\x30\xe2\x68\x33\x7b\xda\x23\xec\x99\x1c\xf3\xc4\xdc\x2b\x0f\x7e\x62\xd6\x29\x40\x05\xdf\x14\x40\x30\x4d\x6f\xe5\x92\xc5\x36\x28\x59\x6b\xd9\x3e\x2e\x59\xa4\x98\xac\x5a\x9d\x98\x94\xcb\x12\x43\x69\x00\xde\x6e\xc6\xc4\xcb\x7a\xcf\x98\xb6\x98\xab\x20\x2d\xe6\x04\x65\x31\x92\x39\xa8\x90\xdb\x63\x2e\x07\xb3\x7e\xcc\xb2\x08\x58\xc1\xbf\x08\x28\x84\x29\x3e\x56\xdd\x55\xa1\x10\xb9\x2c\xb3\xb0\xa7\xef\xf9\x14\x04\x44\x92\x1f\x81\x40\x7d\xa8\xef\x7b\x63\x32\xf3\xd1\xe4\x12\xc5\xdf\xcd\xf0\x37\xf2\x40\x19\xad\x30\x43\x77\x84\x78\xdc\xc0\xdf\x1c\x9b\x24\x2f\x4c\x81\xae\xfc\x86\xe4\x19\x74\xd3\x6f\x22\xd2\x77\xb0\xfb\x08\x3f\x5b\x60\x85\x70\xf2\xdd\x4a\x35\x61\xd5\x5e\xa0\x69\xf9\x99\x4d\xa9\xea\x4a\xc2\xfc\x50\x6a\x88\x02\x8d\x77\x5e\xfc\x43\x67\xc3\x0e\xd7\x1b\xa6\x2b\xf0\xfc\xf3\x88\x9a\xc3\xbf\xe2\xe1\xeb\x37\x4d\xbe\x40\xcd\x04\x7c\x68\xbe\x4c\x4d\x2e\x34\xfa\x5c\x27\xfd\x8c\xd8\x00\xdf\xd3\xb5\xc9\xa5\xb9\xb8\x30\xe7\x83\xfe\x4c\x13\x2f\x7e\xe2\xaa\x4a\x4b\x60\x4b\x3f\x50\x4e\xb1\x94\xcf\x7b\x0e\x61\x26\x1f\x2c\xa7\xd8\x99\x43\xc9\x6a\xcf\x13\x20\xd1\x29\x60\x6a\x31\xfe\xb9\xb6\xf2\xa2\x58\xea\x8a\x18\x98\xde\xf3\x17\x46\x4a\x1f\xbf\x03\xc1\x1e\x9c\x80\x17\x9b\xff\x04\x00\x00\xff\xff\x54\x8b\x00\x0a\x52\x2e\x00\x00")

func idracPyBytes() ([]byte, error) {
	return bindataRead(
		_idracPy,
		"idrac.py",
	)
}

func idracPy() (*asset, error) {
	bytes, err := idracPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idrac.py", size: 11858, mode: os.FileMode(493), modTime: time.Unix(1465825136, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _idracToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xf2\x49\xcc\x4b\x2f\x4d\x4c\x4f\x55\xb0\x55\x50\x2a\xa8\x2c\xc9\xc8\xcf\x53\xe2\x82\x89\x85\xa5\x16\x15\x67\xe6\xe7\x01\xa5\x8c\xb9\xb8\xa2\xa3\x8b\x52\x0b\x4b\x33\x8b\x52\x73\x53\xf3\x4a\x62\x63\xb9\xf2\x12\x73\xc1\x9a\x40\xa2\xa9\xc5\x25\xc5\x4a\x5c\x65\x70\xe5\x4a\x46\x7a\x86\x06\x7a\x06\x4a\x80\x00\x00\x00\xff\xff\x20\xd2\xea\x2d\x5d\x00\x00\x00")

func idracTomlBytes() ([]byte, error) {
	return bindataRead(
		_idracToml,
		"idrac.toml",
	)
}

func idracToml() (*asset, error) {
	bytes, err := idracTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idrac.toml", size: 93, mode: os.FileMode(420), modTime: time.Unix(1465934838, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _iloPy = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x59\x7b\x6f\xe3\xb8\x11\xff\xdf\x9f\x82\xe7\x45\x21\x09\xf5\x7a\x1d\x27\xbb\xdd\x4d\x91\x02\x3e\xc7\x69\x8d\xc6\x4e\x10\xe7\xfa\x40\x10\x08\xb2\x44\xc7\xbc\x95\x28\x9d\x28\x25\xf1\x15\xf7\xdd\x3b\x43\x52\x12\x65\x49\x89\xb3\xe8\x61\x2b\xff\x23\x93\x9c\xe1\x3c\x7e\xf3\x20\xf5\xee\x87\x0f\xb9\x48\x3f\xac\x19\xff\x40\xf9\x23\x49\x76\xd9\x36\xe6\xbd\x1e\x8b\x92\x38\xcd\xc8\xcf\x02\xfe\xe8\xf7\x58\x14\x6f\x62\x27\x7a\x9b\x34\x8e\x88\x1f\x27\x3b\xa2\x07\x03\x4a\x13\xfc\x5f\xd2\x6e\x13\x16\xc6\xbd\x5e\x6f\x31\x99\xba\xd7\x37\xb3\x8b\xf9\xbf\xdc\x1f\x2f\x27\xd3\xbf\x5f\xce\x57\xb7\xe4\x8c\xdc\xf5\x08\x3c\xd6\xc7\x11\xfc\x4e\xac\x01\xb1\x8e\x8f\x3f\x8e\x3e\x5d\xe0\xdb\x68\xf4\xe5\xf3\x9f\x3e\xa9\x37\x7c\xca\xb7\x29\xbe\x8d\x47\x27\x47\x1f\x8f\xf1\xed\xe8\xe4\xcb\xd1\x18\x66\x15\xa7\xd1\x78\xa4\x39\x5d\xcc\x2e\xe0\x91\x2b\x26\x17\x5f\xc6\x8a\x7e\x3c\xfa\xac\xde\xce\x67\x93\xf3\xf1\x54\xad\x9b\x9c\x9f\x9c\x03\xfd\x7d\xaf\x77\x3e\xfb\xc7\x7c\x3a\x73\xe7\xcb\x8b\x2b\xf7\x76\xb6\xb8\xbe\x9c\xdc\xce\x40\xca\xff\x48\xde\xfd\x28\x0e\x68\xe8\x72\x2f\xa2\xfd\x53\xd2\xef\xab\x1d\xfb\x49\x1a\xfb\x54\x88\x38\x15\x30\x7a\x77\xaf\x47\x23\xcf\x77\xbd\x20\x48\x61\x86\xd6\x26\x02\x26\xbe\xea\x01\x52\x3e\xef\x48\xce\x73\x41\x03\x62\x4b\x7b\x91\x20\xa6\x82\x5b\x19\x01\xde\x8f\x2c\xa0\x44\xe4\xfe\x96\x30\xbe\x89\x1d\xc5\x44\xd0\x94\x79\x20\x4a\x1e\xad\x69\x6a\x0a\x13\xd1\x28\x4e\x77\x7a\xbf\xdf\x7a\xbd\xeb\x9b\xab\xe9\x6c\xb5\xba\xba\x39\x40\x9d\xb7\x8b\xb1\xf1\x22\x16\xee\x0a\x6a\xa5\x88\xa2\x4c\x69\x96\xa7\x5c\xc0\x62\x80\x00\x4d\xe9\x80\xac\x73\x00\x0f\x0f\x77\x64\x13\xa7\x84\x5d\x5e\x8d\x89\xad\xdf\x8e\x49\xb6\x65\x82\x6c\x18\x0d\x03\x02\x2f\x34\x4a\xb2\x9d\x83\xbc\x78\xfc\x8b\xa7\x76\x0a\xbd\x35\x0d\x4d\x45\x19\x0f\xe8\x33\x0c\x2c\x63\x4e\x07\x35\x1b\xaa\xad\x04\x03\xd1\xbc\x54\x4a\x8b\x4c\xbd\x47\x0f\xfe\xaf\x43\x4a\x3c\x51\xb0\xd3\xb6\x4c\x28\x0d\x0a\x4e\x6a\xc8\x8f\x53\xe9\x34\x35\x04\x66\x5c\xcc\x16\x57\x37\xff\x6e\xb1\x61\x43\x2e\xc1\x7e\xa5\x75\x66\x2d\xfc\xf7\x84\xff\x06\xc9\x41\xa6\x9e\x1f\x7a\x42\x90\x79\x18\xcf\xd2\x34\x4e\xed\xd9\xb3\x4f\x93\x8c\xc5\xdc\x39\x95\xbb\x24\x30\x0b\xab\x02\xba\x01\x3b\xa6\x91\x17\x82\x64\xae\x01\x4b\xdb\x78\xd7\x24\xc6\x08\xa8\x68\xfc\x1b\xe6\x49\x42\x53\xdb\x19\xa6\x34\x09\x3d\x9f\xda\xd6\x7b\x0c\x9d\x53\x4b\x01\x41\x79\xdb\x24\xd0\x1b\x3f\xd0\xcc\x05\x38\xb8\x8c\x8b\xcc\xe3\x40\xb7\x8d\x45\x36\x20\xa0\x6c\x3a\x90\x02\x3e\xc5\x69\xa0\x37\x47\xd8\x9c\x29\xf8\x0c\x41\x29\xb9\x14\xc1\x79\xa6\x68\xc2\xf8\x81\xf1\xb3\x3a\xe5\x59\xc9\xc2\x14\x43\x25\x1c\xdc\xde\xc5\xfd\x41\x2a\x61\xa7\xde\x93\x7c\x19\xe0\xac\xfb\x48\x53\x51\x19\xea\x1d\xb9\xdd\x52\x12\x78\x99\x47\x44\x96\xe6\x3e\x30\xa1\x12\xa5\x90\xb3\x48\x19\xc3\x9a\x3b\x04\x87\x4c\x7a\x0a\xe6\xe0\x9e\x04\xc6\xb3\x1d\xe1\x9e\xc8\x76\x03\xcd\x8f\x82\xcf\x7d\x08\xd0\x0a\xed\xc7\xc4\xe6\x31\xf1\x43\x0a\x8e\x85\x0c\x90\x31\xee\xa3\xab\xc8\x9a\x66\x4f\x94\x72\xc0\xfc\x9a\x06\x01\x30\x5f\xce\xa7\xe0\x72\x1e\x68\x4e\x6c\x35\x5d\xcd\x09\x66\x52\xe1\x0c\x95\x99\x36\xa6\x0a\xe4\xec\x8c\x1c\x2b\x35\xf0\x01\x2b\xa7\x60\xf1\xe0\x19\x2c\x39\x92\xa3\x34\x14\xb4\x7d\xfe\x68\xdf\xe5\x14\x9d\x7e\x77\x2f\x87\x51\xec\x08\x20\x48\x0a\xc3\x55\x3c\x64\x9c\x4a\x7c\x0c\xc1\xbc\xb6\xa5\xfe\x03\x1c\xee\xee\x9d\x6a\x11\xaa\xad\xe8\xf9\x03\xb5\xcb\x7d\xc1\x8f\x94\xdb\x8a\xc4\x19\x90\xb1\x53\xf1\xd5\xca\xd9\xb5\x81\x6a\xc3\x3b\x76\x7f\x67\x21\x1e\xac\x7b\x54\xda\xba\x06\x9b\x58\xa5\xa5\x3a\xd6\x3f\x7a\x61\x8e\x04\x3f\x00\x01\x78\xc1\x42\x93\x42\xfc\xc4\xfc\x41\x90\x2c\x26\xd1\x43\x94\x15\x1e\xae\xb1\xd9\x13\x4b\x1b\x0a\x74\x6e\x8f\xa4\x62\x47\xf2\x47\x72\x54\xed\xea\x34\x78\x80\x7a\x40\x76\x77\xfa\xe9\x1e\x18\x65\x68\x9e\xb6\xb2\xd8\xdc\xbb\xe1\xa8\xa1\x07\xf1\xc8\x03\x0c\xe1\xae\x08\xa4\xc2\x0c\x02\x99\x84\x6c\x51\x22\x5e\x78\x51\x02\x19\x45\x93\x49\x81\x0d\x5c\x43\x3e\x1b\x7f\x3c\x3e\x26\x8b\xbf\xfd\xda\x2f\x40\x27\x10\xec\x28\x35\x26\x2d\x03\x51\x60\x14\x48\xf2\xb6\x18\x8a\x24\x64\x99\xdd\x27\x7d\xe7\x6e\x74\x5f\x93\xaa\x26\x49\x55\x2e\x65\x50\xe2\x5f\x14\x4b\xae\x2f\x52\x86\xcc\xbf\xb6\x6f\x78\xe1\x00\x89\x4f\x48\xbc\x21\x27\x44\xd2\xfe\x99\x7c\x86\xa2\x92\x52\x2f\x10\xfd\x9e\x61\x7d\xbf\x5d\x09\x7c\x7c\xad\x88\x5f\x2a\x02\xec\x0c\x5d\x0c\x7d\x7c\x25\x6d\xa5\x49\x3d\x6e\x92\x22\x6e\xa4\x6e\xd5\x2e\xf8\x17\x56\x16\x2d\x92\xdd\xac\xcd\x4e\x6d\xed\x9d\xa5\xea\x2b\x02\x1e\x33\x93\x9d\xa8\x80\xbb\x50\xa3\x03\x28\x3a\xce\x3e\x85\x2c\x0f\x92\x40\x2f\xbe\x94\x03\x72\xed\xde\x52\x09\x09\xb9\xd4\x40\x88\xa6\x5a\xc9\xb9\x06\x77\x69\x5b\x49\x52\x79\x49\x53\xcc\x9e\xa9\x9f\xcb\x94\x76\x4b\xfd\x2d\x8f\x21\x5d\xef\xf6\x19\x28\x63\x15\xd8\xc5\x91\x1a\x4c\xaa\x25\xb5\xf4\x2d\x3b\x1a\x95\xc0\xe5\xeb\x3e\x58\xb0\xe2\x96\xc8\x3e\x14\x2b\xa3\x2f\x9f\xc8\xe2\xc7\x1a\x36\x3a\x00\xfe\x2a\xc8\xeb\x40\x97\xa1\x2a\xe5\xec\x4a\xa6\x72\xb2\xe2\x0f\xff\x4d\x50\xec\x75\x1a\x8e\xb9\xce\x74\x6f\xd4\xed\x5e\xb9\x12\xad\x52\x7a\x4a\x9a\x48\x53\xac\x70\xc2\xd9\x5f\xdd\x86\x85\xa8\x03\x0b\x4a\x83\x32\x05\xd1\xa8\x9e\x82\xe4\x2c\x78\xb0\xb5\xac\xd6\x8b\xa8\x3a\x67\xbc\x2f\x6b\xe9\x2f\x39\xcb\x28\x18\xca\x8f\xf9\x23\xe5\x8c\x42\xf3\x88\xb6\x8b\xf3\x14\xb8\x41\xe9\x7f\xef\x7b\x02\x1a\xa6\x0c\x3b\x4a\x98\xa0\xe4\x89\x12\x0e\xd2\x61\x2e\x07\x2c\x6e\xbd\x04\xa8\x21\xa3\x13\x70\x52\x06\x00\x58\xb3\x6c\xa8\x90\x04\x55\x3a\xf1\x52\xea\x62\x2f\xe1\xa2\x4c\x12\x50\xe5\xbf\xb6\xb6\xa0\x9c\x2c\xbb\x3d\x7c\xfa\x70\xec\x71\xb1\x35\x33\x7a\x7a\x39\xde\x7a\x0c\x90\x33\xb5\x9e\xbc\x1a\xed\x38\x20\xfc\xd6\x51\xe5\xc7\xa7\xb5\xe2\x0a\xda\x64\x05\xa4\x4a\x49\x1b\xc5\x14\x57\x69\x2f\xe6\xeb\x9f\xa9\x9f\x59\x8e\x2c\x9e\xab\x9d\xc8\x00\x77\x73\xd0\x03\xea\x19\x86\xad\xd5\xac\x3a\x25\x5b\xc0\x87\x56\xda\xba\x2f\xa3\x17\x38\x37\x0b\x1c\x38\x0e\x5a\x9b\x9c\x1e\x2a\xc7\x75\x61\xb4\xc3\x45\xa9\xec\xfc\xad\xc2\x34\x3b\x0c\x7c\xba\x44\x5c\xa8\x60\x3e\xa7\x8f\xcc\xa7\xed\x0d\xc7\x1e\xb9\x0c\x30\xd9\x72\xa8\x22\x0f\xcd\x4f\x18\x42\x08\xbd\xd6\x61\x18\x4a\x2a\xc8\xfc\x2f\xad\x0d\xd1\x85\x79\x0d\xe5\x37\xe6\x75\xef\xe6\x74\xa7\x3e\x7c\xca\x8e\xaf\x49\xd8\x5c\x0b\xbe\xd4\x27\x39\xae\x09\xdb\xfb\x99\x4e\x47\x94\x0b\x44\x79\x6a\x90\x7c\x06\xd0\x38\xfb\x99\xd3\xe9\x81\x9a\xb4\x55\xeb\x87\x3e\x9c\x19\xdd\xb5\xec\xea\x27\x42\xb0\x07\x1e\x41\x82\xb1\x5a\x79\xb5\x78\xa7\x78\x4c\x2f\x99\x21\xfc\x9a\xb3\x8a\x67\x0d\x5d\xc9\xd7\x97\x5d\x49\xc3\x17\x9b\xfc\x6f\x09\x7f\x08\xb4\x00\x52\x30\x59\x62\x03\xfd\x8a\xbb\x7f\x97\xb8\x6f\xef\x0f\x0e\x16\xe4\xf7\x88\xfa\x4a\x38\x55\x45\x6b\xd2\xb4\xc2\xac\x11\xe4\x6f\x20\x50\x55\xd4\xa4\xf8\x0e\xf9\xe0\xc0\x78\x37\x63\xb8\x49\xdc\x1e\x1b\xaa\xdc\x83\x08\x01\x93\x6e\xc6\x1a\x5d\x6c\x03\x38\xde\x41\x81\x0e\x19\x5e\x63\xa8\x5b\x8e\x6c\xeb\x65\x96\xc0\x52\xde\xc1\x4d\xde\x15\x3d\x79\x3b\xac\xed\xea\xc4\xfc\x90\x33\xb1\x2d\x4f\xcc\x85\x38\x50\xeb\x45\x26\x55\xf7\x18\x87\x45\x1d\xec\xea\x07\xec\x47\x31\x54\x47\x6b\xa1\xce\xd6\xc3\xef\x92\xa2\x0e\x3a\xcd\xb6\xd0\x99\xa9\x0d\x4f\xb5\xff\x97\x29\xcc\xbc\x76\x48\x3d\x26\x68\x75\x53\xd5\xff\x89\x7f\xe5\xf1\x13\x27\x45\x7e\x83\x93\x16\xe8\x71\x4a\xfe\x10\xf4\x87\xaa\x0d\xb0\xcd\x7e\xcc\x29\x5a\x22\xbc\x3b\x68\xcd\x4e\x0e\xf9\x0b\x39\xea\xdc\xaf\x26\x6a\xff\x56\x22\x53\x6c\xe3\x1c\x00\xbe\xa6\x0a\x68\x18\xc0\x6d\x5d\x91\x74\x28\xe9\xd7\x39\x40\x54\x64\x45\x6b\x5b\x36\xb4\xeb\x5d\xad\x9d\x1d\x56\x34\xb5\xf6\xb8\x14\x7f\xef\x86\x4c\xeb\x2a\xf5\x8e\x3c\xee\x3d\xd0\x54\x7b\x70\xf3\x54\xd5\x01\x62\x4c\x63\x50\xba\xd5\xa4\x5d\x5a\xa9\x1a\x53\x71\xab\xd6\x63\xb1\xab\x0e\xdf\xaa\xb9\xe9\xe3\xcd\x54\xbf\xb2\x5b\xad\xe6\x90\xe3\xaa\x18\xbd\x8d\xe5\xb8\x93\xe5\xb8\x05\x1c\xf5\x15\x65\x62\xac\x2e\xf3\x8a\x59\x6d\x31\x1c\x09\x64\x37\x26\x9d\x6f\x5a\xac\xad\x8d\xaf\x55\xc8\x16\x0b\x56\x27\x02\xa7\xd1\xf6\xbf\xed\xd8\xa0\x4f\xa5\xa5\x64\xc0\xa0\xed\x7b\xc2\xfe\xb2\x7a\x71\x2b\x8e\x60\xc6\x35\x49\x47\x19\x6c\xec\xd7\x88\x66\xe0\x55\x61\xbf\xba\x0b\xed\x0e\xff\x16\x7d\x5a\x76\xa9\x7d\x7c\xd8\xdb\xa5\x35\x3a\xe1\xa8\xac\x8b\xa0\xa4\x24\x4b\x45\x29\x4f\xad\x43\x38\x1b\xb2\xc4\xee\xdc\xac\xfa\x48\xf1\xa6\x9d\x6a\xfd\x4e\x75\x3c\x6e\xdb\x40\x97\xd6\xc2\xf0\xfa\xbe\xa1\xa5\xf8\xd6\xe2\xd8\xe0\xa1\x71\x29\x7c\x8f\xbf\x78\xbf\xbd\x91\x32\xcb\x20\xe9\x77\xe7\xc6\x65\x4c\xe6\xd7\xc5\xa5\x24\x16\x3f\xe4\x4b\xb6\x9e\x80\x5c\x45\x79\xf1\x29\x26\x18\xf6\xcb\x78\xc7\xdd\x0e\xe0\x5a\xc5\xac\xa4\x40\x93\xbe\xc8\xf6\x40\x61\x0d\xb6\x85\xc2\x2f\xb0\xad\x82\x4f\x5f\x4d\xbc\xfe\x75\xa0\xd7\x4c\x12\x2f\x25\xcd\x96\x28\x3c\x38\x63\xe8\x6b\x3d\xbc\xea\xc1\x6f\x9e\xc3\x20\x8f\x12\x61\x1b\xa4\x50\x8a\x7a\x3d\xb0\x8d\x2b\x11\xe9\xba\xb2\x04\xbb\xc0\x8c\x71\xd7\xb5\xaa\x7b\x03\xd8\x34\x16\x43\xca\x1f\x59\x5a\xa4\xcc\xf9\xb5\x7b\x7b\xe5\xae\xa6\x93\xa5\x81\x47\xe5\xba\xc6\xda\xc5\x64\x39\xf9\xeb\x6c\x31\x5b\xde\xba\x3f\xad\x66\x37\xee\x72\xb2\x98\x19\x54\xa5\x9d\x5f\xa7\xbc\x9e\xac\x56\xff\xbc\xba\x39\x37\xa8\x33\xf3\xf6\xa9\x1b\xb4\x2a\x53\xcb\x6f\x4a\xc4\x2e\x3c\x3e\xa8\xbe\xcf\x4c\xe3\x28\xca\x39\xf3\x65\x9d\x94\x93\x0e\x7e\xa0\xa2\xe6\x7d\x27\x1a\x92\x0e\xbd\xf4\x41\xd4\x6e\xcb\x20\x5e\x87\xf4\x99\x65\xf6\x91\xd3\xfb\x6f\x00\x00\x00\xff\xff\xb1\x7a\xf4\x6c\x7a\x1e\x00\x00")

func iloPyBytes() ([]byte, error) {
	return bindataRead(
		_iloPy,
		"ilo.py",
	)
}

func iloPy() (*asset, error) {
	bytes, err := iloPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ilo.py", size: 7802, mode: os.FileMode(493), modTime: time.Unix(1465825136, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _iloToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xf2\x49\xcc\x4b\x2f\x4d\x4c\x4f\x55\xb0\x55\x50\x2a\xa8\x2c\xc9\xc8\xcf\x53\xe2\x82\x89\x85\xa5\x16\x15\x67\xe6\xe7\x01\xa5\x8c\xb9\xb8\xa2\xa3\x8b\x52\x0b\x4b\x33\x8b\x52\x73\x53\xf3\x4a\x62\x63\xb9\xf2\x12\x73\x91\x34\xe9\x66\x14\x64\xe6\xe4\x2b\x71\x95\xc1\xb5\x28\x19\xeb\x59\x28\x01\x02\x00\x00\xff\xff\x5e\xdd\x05\xf1\x5e\x00\x00\x00")

func iloTomlBytes() ([]byte, error) {
	return bindataRead(
		_iloToml,
		"ilo.toml",
	)
}

func iloToml() (*asset, error) {
	bytes, err := iloTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ilo.toml", size: 94, mode: os.FileMode(420), modTime: time.Unix(1465934844, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"idrac.py": idracPy,
	"idrac.toml": idracToml,
	"ilo.py": iloPy,
	"ilo.toml": iloToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"idrac.py": &bintree{idracPy, map[string]*bintree{}},
	"idrac.toml": &bintree{idracToml, map[string]*bintree{}},
	"ilo.py": &bintree{iloPy, map[string]*bintree{}},
	"ilo.toml": &bintree{iloToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

