// Code generated by go-bindata.
// sources:
// bundled_scripts/README.md
// bundled_scripts/idrac.py
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _readmeMd = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\xcd\x8e\xd4\x30\x10\x84\xef\x7e\x8a\xd2\x82\x04\x2b\x6d\x3c\xcf\xc0\x09\x38\xc1\x61\xee\xd8\xb1\x3b\x71\x23\xc7\x8e\xfc\x33\xd9\xbc\x3d\x6d\x76\x16\xd0\x1e\x38\x45\x69\x95\xbf\x2e\x57\xf9\x1d\xe6\x9e\x7c\x24\xff\xa3\xba\xc2\x7b\xab\x4a\x5d\x03\x57\x78\x2e\xe4\x5a\x2e\x27\x5c\x4e\xcd\x72\xaa\xb8\x0b\xb0\xe4\x02\x53\x6c\xdc\xc3\xe4\x22\xcb\xd8\x26\x23\xaa\x6d\xb3\xc9\x6b\x5c\x03\x9d\xb0\x85\xd4\x9d\x8b\x83\x5b\xc0\xcc\xc9\x0a\x6b\x2f\xd9\x77\x27\xc3\xf9\x84\x59\xb3\xec\xe6\xe8\xcd\xd3\xf8\xed\x8d\x23\x57\x4e\x2b\x36\x72\xc1\x26\xae\x5b\x55\xa2\xbf\xb1\x7f\xd5\x0b\xa8\xcf\x5a\x36\x5d\x7e\x36\xa2\x7e\x50\xba\xac\x79\x12\xb4\xb7\xcd\x0a\xa5\x66\xd0\x8d\x86\x65\x39\xbf\x12\x5a\x46\x0b\xb4\xa9\x1a\x72\x8f\xc2\x20\xb1\x1e\x63\x3e\xfe\xec\x7f\x3d\x8b\x69\x2f\xb4\xf0\x33\x1e\xde\x84\xf1\xa0\xde\x0c\x2e\x06\x1f\xb9\xd6\x2e\x88\xa5\xe4\x6d\xf0\xb1\xcb\x6d\x53\x1b\x89\x3d\x62\x92\x89\xa4\x77\x70\x8c\x58\x29\x51\xb1\x8d\x60\x95\xb9\x2f\xd2\x6b\x36\x58\x38\xd2\x13\x8e\xc0\x2e\xe0\xc5\x5a\xfa\xd0\x86\x3b\xf2\xdc\x04\x2c\x39\x76\x1b\xe3\xa9\x95\xfa\xba\xe0\xcc\x1d\x3e\x0f\x45\xb0\x37\xfa\xd7\xb5\x01\x3d\x93\xeb\xcd\xce\x91\xc0\x69\x28\xa5\x98\xf7\x9f\xbf\x7d\xff\x74\xfd\x22\x71\x88\xb7\xa4\xa4\xb8\x26\x30\x70\x7b\x29\x62\xa4\xbe\x52\xc3\xd4\xf1\xff\x3c\x2f\x5a\xeb\x71\xd9\x06\xae\x2a\x65\xf9\x24\x17\xfb\xe8\x42\x56\x99\x35\x4a\x2d\xfa\xb4\x5b\x34\xe2\xdc\xd9\x5e\x09\xbf\xa5\x18\x52\x4f\x3b\x25\x4f\xc9\x9d\xc8\x8b\xfa\xfb\x56\x0c\x76\x2a\xa8\xf4\xa8\xd5\xaf\x00\x00\x00\xff\xff\x38\x75\x27\x88\x78\x02\x00\x00")

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 632, mode: os.FileMode(420), modTime: time.Unix(1463047570, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _idracPy = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x3a\x7b\x6f\xdb\xb6\xf6\xff\xfb\x53\xf0\xe7\x61\x90\x8d\x39\xb2\x9d\x47\xd7\xfa\x57\x77\x70\x6d\x67\x33\x56\x27\xb9\x71\xb2\xf5\x22\x37\x10\x18\x89\x4e\xb4\xca\x92\x46\x4a\x75\x7c\x83\x7c\xf7\x7b\x0e\xa9\x07\x25\xf9\x51\x27\xb7\xc0\x4d\x81\x8a\x22\xcf\x8b\xe7\x4d\x5a\x3f\xfc\x5f\x3b\x16\xbc\x7d\xe7\xfa\x6d\xe6\x7f\x25\xe1\x2a\x7a\x08\xfc\x5a\xcd\x5d\x84\x01\x8f\x08\xe5\xf7\x21\xe5\x82\xa5\xef\x7f\x09\x58\x4c\xc6\x81\x48\x47\x61\xc8\x5d\x3f\x4a\xdf\x78\x06\x1d\xc7\xae\x53\x9b\xf3\x60\x41\x1e\x17\x9e\xc9\x22\xce\x18\x49\x96\xc6\x1e\x5b\x30\x3f\xba\xc2\x29\x2a\xc8\xf8\xaa\x96\xa3\xff\x1d\x33\x11\x09\x85\x98\xbe\x99\x21\xb5\xbf\xd0\x7b\x26\xcc\x98\x7b\x9e\x7b\x77\x64\xb2\x47\x9b\x85\x91\x1b\xf8\x22\xa5\x39\xf1\x05\xb3\x63\xce\x2e\x15\xce\x9f\x94\xfb\xae\x7f\x5f\xab\x5d\xcf\xc6\x97\xa4\x0f\xf2\x9a\xb0\x43\x97\x07\xfe\x8d\x31\x1d\x9c\x0d\x7e\x1d\x4f\xc7\x67\x57\x16\xae\x5a\x67\x83\xe9\xd8\xb8\xad\x5d\x0c\x66\xb3\x1d\x90\x08\xf2\xe7\xf9\xe5\x08\xa0\x6b\xb3\xe1\x6f\xe3\xe9\x00\x10\xea\x0f\x51\x14\xf6\xda\x6d\x61\x3f\xb0\x05\x15\xa6\xb3\x88\xe6\x66\xc0\xef\xdb\xcb\x3b\xb6\x68\x2f\x85\xed\x2e\xda\xdd\x36\xfc\x7f\xa0\x20\xda\x87\xf5\xda\xe7\xe9\xa7\xb3\x99\x85\xec\xea\x4f\x09\xfa\x72\xb9\x34\x97\x47\x12\xf1\xb0\xd3\x39\x6a\x77\x4e\xda\x22\xa0\xe1\x01\x08\xc3\xbc\x20\x64\xcf\x29\xd6\x9f\xb3\xf1\x99\x8e\x98\xf2\x05\x35\x23\x82\x62\x2d\x90\xc8\x71\xbb\xf3\x0e\x0c\x1b\x2f\x18\xa7\xa8\x2c\x8d\x04\xec\x6c\x1d\x8d\xb2\xec\x0b\xea\x83\xec\xf2\x69\x3e\x0a\x27\x23\x70\xd6\xb5\x3e\x0e\x66\xe3\xb5\x24\x98\xe7\x99\x76\xb0\xd8\xbc\xfd\xf6\x8f\x02\x08\xfd\x40\x7e\x65\x3e\xe3\xae\x4d\x24\xf9\x03\x9b\xd3\x79\xc4\x1c\x82\x7b\x20\x0b\x26\x04\x18\xbc\x36\x3b\x1f\x5c\x58\xe3\xb3\xeb\xa9\x12\xd9\xba\x1a\x4f\x2f\x3e\x0d\xae\x90\xb1\x61\x18\xef\x7f\x81\x3d\x93\xaf\x8c\x0b\xd8\x5c\xbf\xde\x35\x3b\xf5\x5f\x3e\xd4\xde\x8b\xde\x38\xd1\x19\xba\x9e\x2f\x7a\xa2\x5f\xff\x46\x25\xd7\x13\x8c\xa5\xa0\xfd\xb2\x5d\xd7\xea\xf7\x6d\x9b\x3a\x0e\x07\x69\xc1\xd9\x72\x64\xd8\x4f\x05\x7d\x87\x6a\x73\x64\x56\xc5\xdd\x6d\xda\xfa\x87\x1a\x21\xb0\xf3\xdf\x18\x75\x18\xc7\x17\x78\x85\x5d\xf4\x06\x36\x2e\x13\xd1\x5b\xc4\x22\xba\xf6\x61\x51\x44\xd4\x77\xfa\xf5\x88\xc7\xac\xfe\x61\x6f\x46\xed\x71\x32\x66\xef\xdb\x39\x7d\x8d\xe1\x55\xb0\x91\xd9\x13\xec\x15\xac\x8a\xb1\x6f\x41\x24\x3f\x2b\x0a\x57\x41\x86\x0d\xeb\xbd\x4b\x26\x82\x98\xdb\xec\xfa\x72\xb2\x99\x10\x4f\x80\x24\x89\x12\x96\x26\xcb\x54\xb9\xd1\x64\xb4\x91\x12\x66\xa9\xde\x13\xfe\x9f\x48\x93\xa1\x68\x64\x2e\x59\xe8\xad\x52\x31\x53\xbd\x2a\xb3\x7f\x93\x02\x75\x27\x69\xf3\xc0\x63\x6d\xea\x07\xfe\x6a\x11\xc4\x22\x51\x62\x42\x4c\xb1\x6c\x57\x78\x26\xaa\x99\x31\x8f\xd9\x51\xc0\x67\x2c\xd2\x64\xd1\x57\xc8\x19\x5d\xb0\x7e\xdd\xb2\x20\xde\x7c\x18\x0a\xc8\x9c\xa8\x2f\x91\xac\x67\xfa\x4a\x11\x72\x96\x6b\x18\xbc\x6f\xeb\x0e\x05\xde\xf5\x31\x70\x56\x99\x44\xcc\xef\x65\xbe\x50\x12\xe7\x1c\x72\xf3\xc2\xfd\x37\x1b\x6b\x7e\x53\x02\x99\xd2\xc7\xa4\x0c\x08\xf4\x8b\x47\x8b\x25\x6f\x99\x88\x3a\x44\x26\x65\x99\x29\x8a\xa8\xa4\xc2\x51\x1a\xf7\x1f\x6a\x90\x1d\x6a\xa7\x43\x6b\x72\x76\x7a\x6e\x8d\x3f\x5f\x5c\x8e\x67\xb3\xc9\x39\xa6\x3c\xce\x30\x39\x85\xae\xc7\x1a\xdc\x68\xdc\x74\x0e\xde\xdd\xfe\xd4\x3c\x50\x4f\xa3\x59\xab\x4d\x07\x43\x0b\xc0\x4f\x27\x9f\xad\x8f\x9f\x06\xc3\xdf\x3f\x4d\x66\x57\x80\x76\x23\x25\x30\x4e\x3a\xf0\xef\xd8\x68\x11\xe3\xe8\xe8\xa4\xf3\xe6\x14\x47\x9d\xce\xbb\xb7\x3f\xbf\x51\x23\xfc\xcb\x46\x43\x1c\x1d\x76\x8e\xbb\x27\x47\x38\xea\x1e\xbf\xeb\x1e\xc2\xaa\xa2\xd4\x01\xd7\x50\x94\x4e\xc7\xa7\xf0\x27\x21\x06\xa7\xef\x0e\x15\xfe\x61\xe7\xad\x1a\x8d\xc6\x83\xd1\xe1\x50\xc1\x0d\x46\xc7\x23\xc0\xbf\xad\x41\x2d\x9a\x0c\x3e\xad\x11\xf0\x2c\xf0\x19\x80\x22\xf8\x59\x10\x91\xc1\x57\xea\x7a\xf4\xce\x63\x38\xf1\xf9\x51\xfe\xc3\xe1\x01\xfe\xe1\xe0\xe6\xda\xff\xe2\x07\x4b\xff\x36\x17\x5f\x6d\x41\x09\x89\x34\x66\x21\xb3\xdd\xb9\xcb\x1c\x04\xf9\xe7\xef\xdd\xce\x70\x24\x65\x3d\x3c\x3a\x3e\x79\xf3\xf3\xdb\x77\x1d\xc5\xcc\x97\x3c\x20\xf8\x3f\x32\x72\xea\x7a\x1e\x64\xf2\x8f\x2b\x72\x6e\x8e\xcd\xa9\x29\x65\xae\xd5\x1c\x36\x27\x7e\xc0\x17\xd4\x03\xd7\xb0\x16\xd4\xb6\x92\xb0\x68\x68\xe3\x66\x4f\xb2\xd6\x66\x60\x73\xda\x9b\x19\x87\x21\xe3\x8d\xa6\xc9\x21\x40\xc0\xb9\x1b\x86\xdc\x48\x0f\x6c\x87\x78\x9c\x45\x31\xf7\x75\x04\x60\xbc\xb9\x8f\x70\x5c\x81\xea\xb1\x96\xaa\x5d\x10\x8d\xf5\x6d\x04\xf8\x45\xcd\xf6\x28\xc8\x32\x71\x38\xb5\xc7\x9c\x07\xbc\x31\x4e\x7b\x90\x44\xe4\x90\x4a\x66\x09\xdc\xe8\x72\x30\x6c\x04\x77\x7f\x41\x3c\xc1\xba\x04\xc0\xfd\x5b\x96\xeb\xbb\x91\x65\x35\x20\x22\xe7\x2d\xf2\x10\x88\xa8\x45\x62\xc1\x78\x4b\xe2\x2f\x03\xee\x24\xe4\xf0\x0f\x81\x4c\x84\x01\x1d\xe0\xa3\xb8\x80\x68\xb0\x80\x8f\xe2\x42\x4a\x09\x16\xd3\x61\x2e\x01\x8f\x7d\x0b\x22\x00\x22\xcc\x49\x84\x90\x12\x5b\x98\x2e\x5a\x24\x4d\x14\x7d\x83\x07\x41\xd4\x76\x20\x8f\x18\x9a\x40\xc5\x04\x9e\x36\x3f\x02\x12\xe0\xd3\xb3\x0a\xdb\xba\x39\x47\x13\x47\x8d\x4c\xf6\x66\x86\x7d\x8f\x05\x1f\x02\xd7\xb1\x30\xe1\xa2\xe8\xf0\x30\xf1\xbf\x6e\x23\x87\x4a\x6a\x3f\x2c\x6f\xaa\xfe\x29\x8b\x0c\x45\x59\x5e\x55\x80\xbe\x6a\xcc\x4c\xc8\xf3\xdc\x0d\x1b\x46\xdb\x68\x92\x9f\x08\x3c\xe0\x7f\x6d\xa7\x05\xdc\xe2\xb6\xfa\xc5\xd7\x22\x28\x4a\xdb\x2f\x6e\xa4\x08\x90\x69\x30\x1d\x94\x59\xe5\xa9\xae\x7f\x78\x72\x92\xaf\xe6\x1a\x48\x9c\x78\x7c\x65\x42\xb7\xa5\x14\x69\x41\xe6\x73\x2c\x2c\x2d\xc5\x5d\xa3\xb8\x46\xd9\x06\x46\xd5\x06\x25\x21\x94\x8a\xfb\xc9\x53\x93\xa1\xa9\xb9\x6a\xce\x52\xf9\x09\xea\x22\x45\xd5\x7c\xa2\x5e\xaf\x5f\xf1\x15\x89\xa0\xee\x03\x42\xa1\x7f\xc3\xc9\x10\xd8\x4b\x67\x89\xb1\xfc\x11\x94\x95\xdc\x51\xe1\xda\x19\x01\x1a\x47\x0f\xa0\x0e\xd7\x96\x85\xc2\x84\x24\x16\x81\x27\x46\x0f\x34\x22\x4b\x46\x9c\xc0\x37\x22\x22\x40\x91\x70\x58\xf0\x57\xc0\x44\x60\xbb\x47\x5c\x5f\x6d\x12\xc6\xb9\xfc\x90\x5e\xc8\x57\xc8\x2f\x0e\x18\x87\xcc\x66\x9f\x88\xcd\x78\x04\xd9\x0b\x48\x33\x93\x0c\x00\x7d\x1e\x78\x5e\xb0\x44\x49\xd2\xac\x40\x96\x90\xae\xe0\xed\x00\xc5\xcf\x28\x49\x11\xa5\x68\xe4\x41\x96\x40\x42\xef\xa9\xeb\x9b\xfa\xb6\x73\x83\xc9\xc2\x92\x26\x19\xd8\x70\xc5\x48\x45\xfd\x83\x78\xb4\xaa\xfc\x54\x17\xfd\x46\x16\xde\xad\x62\x40\x97\xcc\x08\x9d\xaf\x3b\x5f\xf5\x4f\xa9\x27\x4a\x64\x94\xc8\xa2\xff\x54\x98\xc5\x3f\x63\x18\xf8\x11\x68\xfb\xe0\x6a\x15\x32\xa3\x47\x0c\x1a\x86\x5e\xa2\x7a\xd9\x0b\xff\x04\x2d\xcc\xff\xdb\x0f\x78\xf0\x8b\xfa\xd7\x57\xa7\x07\x6f\x8d\x22\xed\xe7\x75\x2e\xeb\x62\x6a\x87\xf3\x9b\x19\x7c\xe9\x15\xa0\x61\x81\x9b\xd0\x72\x45\xb1\x80\xb4\xe3\x40\x58\xf7\xc9\x71\xa7\xdb\xab\x08\xc6\xa9\x2b\x98\x9e\x5f\xeb\x03\x54\x3e\xc3\xb1\x09\xc7\x3b\x69\x56\x99\xec\x30\x7e\x09\x18\x3a\xd5\x8a\x59\x6f\xd6\xb6\x52\xaa\xf0\xaa\xcf\x60\xa3\x72\xad\x47\xa0\xd1\x82\x63\x24\xeb\x91\xa7\xe7\x7f\xf9\x49\xda\xc7\x97\xfa\xda\x2c\x93\xf1\x30\x23\xf6\x18\x65\xe1\xd0\xaa\x00\x95\x4c\x95\x4b\x28\x37\x24\xac\x90\xc2\xe6\xe0\x14\xf3\x24\x9e\xb1\x7f\x69\xc3\xf3\x94\xc6\x5e\x94\xc7\x6e\x3f\x39\x24\x56\x50\x3d\x57\x16\x84\x9b\xdb\xf2\x82\x2f\xf5\x9b\xe6\x0d\x25\x62\xd3\x9c\xbb\x90\xe9\x35\xae\x05\xa3\x69\x98\x45\x93\x94\x78\x21\x80\x85\xf4\x20\x80\x38\xc9\xdf\x5c\x5f\x27\x61\xba\x11\xc4\x1b\xcc\x37\x9a\xb7\x7b\x9a\xc4\x28\x98\x24\xb3\x42\x0b\x5e\x84\x34\x50\xc2\x07\x27\x8d\xad\xa6\x49\x4d\x42\x8c\x96\x61\xfe\x15\xb8\x7e\x43\xdb\x4b\x73\x8d\xa5\x36\x18\x2a\xc9\xc2\x4a\x8d\x49\xfb\x62\xdd\xb3\xc8\x82\xd4\xc0\x2c\x4c\x3f\x0d\x17\x37\x64\xa9\x72\xc1\x93\x94\x28\x2f\x3a\xfa\xa4\xb0\x64\xea\x45\xd7\x18\x0d\x27\x53\x6b\xb6\x12\x11\x5b\xfc\xe1\xb2\x65\xd2\xb9\xc8\xe3\x9f\xe5\x77\x01\xb7\x78\xc6\xfe\x91\xd4\x4b\x18\x2a\xf1\xfc\x2d\x4f\xdf\x89\xf7\x3c\x67\x5d\x71\xaa\x2f\x98\x9b\x00\xbc\x80\x67\x19\xbd\xa2\xbe\xc4\xd3\x5a\xa5\x09\xbc\x69\xa8\xce\x41\x25\xce\x27\x53\xa9\xd5\x4c\xda\x83\xd9\x10\x95\xd8\xb7\xa1\x2e\xa4\xff\x51\xcf\x6b\xfc\xad\x56\xd3\x4c\xa1\x80\x72\xa7\xab\xc6\xff\xc4\x07\x10\x80\x8b\x20\xef\x8b\x25\x64\x60\x70\x36\xa8\x14\x25\x23\xa4\xd1\x0f\xf5\x1f\xc2\x07\x98\xe6\x39\xcf\x58\x80\x4f\x7a\xb2\xde\x43\xa6\x03\x5d\x6d\x0c\xeb\x44\x9a\x9b\xce\xad\x0a\x97\x6a\xc6\x78\x7a\xd6\x70\xb3\x5d\x13\x63\x4a\xfd\x78\x4e\x6d\x70\x15\xc6\x8d\x72\xd0\x4b\xd7\x31\x55\x23\x92\x77\xac\x75\xc8\x66\xb6\x59\x6f\x41\x09\x29\x21\xbc\x42\x0c\xdc\xe9\x76\xfe\x5a\xda\x56\xc3\x67\xf9\x3f\x24\x54\x97\x82\x92\xe2\xc5\x1d\x53\x75\x6c\x83\x0c\x1b\x79\x0f\x1f\x20\x11\xbb\x62\xc6\xf8\x57\xd7\x66\x57\xf4\x3e\x95\xa3\xc8\x3f\xb5\x7e\x91\x21\xfa\x02\xd8\xb5\x7c\xa2\xd1\xfc\x42\xda\xf5\xc6\x28\xa0\x19\xb7\x20\x69\x61\x46\xef\xfe\x15\x8a\x1e\xb2\xda\x79\x80\x89\xd7\x84\xed\xd9\x64\xb8\x4f\xcc\x26\xe0\x2f\x0a\xd8\x14\xf7\x3b\x47\x6b\x41\x35\x79\x59\xc1\x34\xaf\x5c\x41\x86\x5d\x31\x90\x73\xeb\x44\x7c\xd5\x2b\xf5\xb7\x76\xe6\x44\xfb\x3a\xf1\x30\x86\x70\xf7\x23\x38\x82\x27\x17\x22\xeb\x1d\x3a\x2f\x7b\xf2\x04\x46\x06\x11\x38\xd8\x5d\x1c\x31\x55\x3e\x0a\x18\x36\x74\x3b\xae\x1f\xb3\x72\xa3\x02\x62\xee\x00\x54\x1b\xd9\x78\x5e\x2d\x54\x51\x78\xbf\xe9\xbd\xb9\x45\x4d\xad\xbb\x3f\xd8\xcd\x29\xb7\x80\x09\xfd\x18\xf4\xa1\x39\x8b\xea\x89\x96\x09\xdd\xb5\x43\x1e\xd8\x30\x09\x05\xee\x35\x7e\x3d\xbc\xb8\xde\xc7\xaf\x13\xf0\x17\xf9\x75\x8a\xfb\xdd\xab\x10\x26\x81\xfd\x3d\x5a\xd6\x8c\x92\x0b\xef\x4a\xbb\x6b\x12\x9d\xd2\x7d\x29\x38\x80\x16\x7b\x44\x6b\xf8\x6b\x7a\x97\xad\x31\x83\x7f\x1b\xa5\x98\xf8\x78\xa7\x69\xb3\xc9\xa8\x1c\x30\x52\x1d\xc5\x2a\x24\xa0\xdd\x8f\x1a\x86\x69\x34\x6f\x0e\xba\xb7\x1b\xbb\x54\x15\x5a\x8d\x3f\xa8\x17\xab\xb8\x6a\x41\xd5\x02\xe9\xe5\xb8\xb9\xc3\xa3\x13\xdd\xa7\xbe\x5c\x3c\x85\x18\xb0\x4d\x26\xa0\x20\xa3\x16\x5e\x96\x28\xce\x64\xca\x3f\x9f\x5f\xa4\xbe\x3f\x94\x24\xb7\x96\xbf\xd2\x62\xb1\x37\x90\x2f\x25\x00\x11\x32\xe6\xbc\x4a\xcc\x29\x7d\x1c\x7a\x81\xfd\x65\x26\x29\xed\x25\x9d\xf4\x14\xc9\x1c\x9e\xa5\xb5\x39\x5d\xb8\xde\x0a\x16\x5f\x98\x65\x2f\xae\x4f\x15\x85\x6f\x6c\x17\x24\x53\x8f\xde\x81\xa7\x57\x34\xf5\xdc\xac\x16\xde\x42\x7a\x5a\xb0\x45\xc0\x57\xaf\x49\x4d\x53\x49\x61\x9f\xec\x94\x63\xbc\x28\x41\x69\xe8\xdf\x3d\x47\x49\xb5\xdd\x64\x40\x4f\xeb\x95\x6e\xc8\xd6\x75\xf3\xb1\xe7\xe5\xa9\x63\x5b\xfb\xba\xcb\x27\x5e\xc9\x79\x5d\xc7\xba\x8b\x65\xd9\x2b\x05\x54\xe6\x57\x85\xe8\x0c\x09\xec\x15\x99\xaf\x4f\x0b\xff\xbd\x74\xf0\x2c\x8b\x9a\x9a\xd4\x6a\x5b\xfa\x73\x1d\x6b\x94\xaa\x5c\x8b\x40\xa1\xe0\x51\xbf\xab\xdc\xef\x56\x0f\x54\xc7\x15\x5f\x5e\xd5\x42\x5c\x3c\xac\x84\x6b\x53\x6f\x04\x84\xf6\x89\xd6\x32\xde\x8b\x62\xb6\x42\xe4\x7f\xb5\xbb\xd0\xe2\x6d\x5b\x9f\xbc\x77\xc0\x6e\x68\x41\xf2\x2a\x27\x2f\x9b\x36\xa7\x11\x5d\xb0\x75\x87\xd2\x17\x1e\x48\xbf\xed\x3c\x9a\x8d\x30\x9e\xe1\x54\x6f\xdd\xad\x22\x79\x18\xd9\xc8\xdb\x40\xbe\xc6\x86\x80\x9e\xf8\x1f\x11\xbf\xaa\x9e\x9c\xcf\xda\x43\xef\x5e\x7c\x24\x05\xd5\x88\x6c\x61\xb4\xbd\x13\xd2\xd2\x57\x45\xb3\x6b\x27\xab\x3a\xa2\x78\xe5\xae\xcf\xa4\xea\xc5\x1b\xd2\x4e\x35\xb9\x92\x36\xe9\x76\x0e\x8f\x8b\x8f\xed\x39\xb6\x70\xf0\xee\x95\x74\x27\xf9\xeb\x33\x3a\x7f\xc3\xd8\xd6\x45\xac\xf9\x21\x66\x4d\x57\xb6\x0e\x2a\xeb\x80\xd6\x7b\xed\xce\xa6\x64\xee\xde\x81\xc5\x1f\xa8\xef\x03\x7d\x9b\x72\xe7\x75\x89\x6f\x38\x19\x31\xbc\xfa\xd8\x2b\xeb\xe9\x48\x2f\x4b\x79\x05\x0a\xdf\x39\xdf\xc5\x82\x39\x96\x2b\x2f\xf5\x04\x8b\x1a\xaf\x4b\x82\xd2\x0b\x5e\x92\xfd\xea\x23\x26\x6c\xf0\x2e\xf9\xc5\xcb\xe6\xa0\x83\x13\xb9\x21\x4d\x4c\x12\x1b\x1b\xe9\x35\x93\xe4\x6c\x7a\xc1\x12\x7f\x42\xde\x79\x2c\x8f\x6c\xbc\xa2\xaf\x7e\x46\x60\x0a\x46\xb9\xfd\xb0\xee\x0a\x71\xcf\x34\x59\x3f\xfd\xc7\x68\x54\xbe\x05\x54\xbb\xd9\xf2\x2b\x8b\x94\x6c\x87\xf4\x61\x52\x10\x2d\xf9\x43\xab\xc4\x30\xef\x79\x10\x87\x8d\x6e\x81\x9e\x0e\x07\x0a\x4a\xed\xbc\x83\x7a\x0a\x66\x52\xc7\x69\x68\x24\x9a\xdf\x98\xf8\x34\x14\x88\x62\xed\x6d\x43\xbe\x90\xcf\x6f\x0b\x70\x15\xad\x8e\x8c\x8c\xcd\xb7\xf4\xda\x3a\xa8\x67\xeb\xb5\x7e\x4d\x39\x43\xf1\x96\x6c\xe7\xad\x62\x2d\xd1\x6f\x01\x26\xd7\xaa\xc6\xff\xc6\x28\xc0\xc8\xab\xcd\xe2\x6d\x8f\xb4\x67\x76\xcd\x93\x72\xdf\x78\xf1\x93\xb2\xce\x01\x36\xf0\xcd\x01\x24\xd3\xfc\x55\x6d\x59\x1e\x83\xb2\xbd\xae\x3b\xc7\x65\x9b\x94\x8b\x9b\x76\x27\x17\xd5\xb6\xe4\x50\x19\x00\xdb\xcd\x94\xf8\xba\xde\x33\xa5\x2d\xd7\x36\x90\x96\x6b\x92\xb2\x1c\xa9\x1c\x54\xc9\xed\x29\x97\x9d\x59\x3f\x65\x59\x05\xdc\xc0\xbf\x0a\x28\x85\xa9\x4e\xeb\xee\xaa\x51\x48\x5c\x56\xd8\xd4\x6f\xc8\x9f\xe9\x15\x9f\x82\x54\x40\x4f\x7d\x4c\xa2\xbe\x15\xc1\xef\x50\x5b\x04\x3f\x44\x6d\xae\x71\xe4\x5d\xce\x9f\xb8\x12\xf6\x16\xf8\x35\xaf\xe9\xc4\x8b\x50\x34\x34\x78\xfc\x00\xa0\xe6\xe2\x77\x2a\x58\x76\x2d\x0b\x7f\xae\x35\x2c\xc0\x87\xf6\xc2\x32\xd2\x0f\x5d\xb8\xfa\xf2\x24\xfd\x40\xd8\x1c\xf0\xfb\x18\xbf\x68\xb8\x90\x2b\x49\x75\x50\x60\x98\x21\x2c\x9a\xac\x37\x0c\xdc\x84\xd1\x22\x3e\xcc\x88\x3e\x24\xc0\x07\xe6\x85\x7d\x39\x2b\x3f\x20\x00\x45\x24\x05\x14\x01\xe4\xf7\x2b\x92\x88\x7c\x20\x19\x91\x10\x97\x2a\xc3\x77\xf9\x79\xc3\x4d\xe7\xb6\x59\xfb\x4f\x00\x00\x00\xff\xff\x13\xe4\x4d\x31\xcd\x2c\x00\x00")

func idracPyBytes() ([]byte, error) {
	return bindataRead(
		_idracPy,
		"idrac.py",
	)
}

func idracPy() (*asset, error) {
	bytes, err := idracPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "idrac.py", size: 11469, mode: os.FileMode(493), modTime: time.Unix(1463986460, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"README.md": readmeMd,
	"idrac.py": idracPy,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"README.md": &bintree{readmeMd, map[string]*bintree{}},
	"idrac.py": &bintree{idracPy, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

